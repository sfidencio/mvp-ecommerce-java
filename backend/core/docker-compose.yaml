services:
  discovery-service:
    build:
      context: .
      dockerfile: Dockerfile-discovery-service
      platforms:
        - linux/amd64
    image: discovery-service:latest
    # Substitua pelo nome/imagem do serviço de descoberta
    container_name: discovery-service
    working_dir: /app
    ports:
      - "8761:8761" # Porta típica do Eureka ou outro servidor de descoberta
    environment:
      - EUREKA_SERVER_HOST=discovery-service
      - EUREKA_SERVER_PORT=8761
      - EUREKA_SERVER_LOG_LEVEL=info
      - EUREKA_TYPE_PROTOCOL=http
    networks:
      - app-network
  
  config-service:
    build:
      context: .
      dockerfile: Dockerfile-config-service
      platforms:
        - linux/amd64
    image: config-service:latest # Substitua pelo nome/imagem do config-service
    container_name: config-service
    ports:
      - "8080:8080" # Porta típica do Spring Cloud Config Server
    environment:
      - CONFIG_SERVER_HOST=config-service
      - CONFIG_SERVER_PORT=8080
      - EUREKA_SERVER_HOST=discovery-service # Define host do servidor de descoberta
      - EUREKA_SERVER_PORT=8761 # Define porta do servidor de descoberta
      - CONFIG_SERVER_HOST_GITHUB=https://github.com/sfidencio/mvp-ecommerce-java
      - CONFIG_SERVER_LOG_LEVEL=info
      - CONFIG_TYPE_PROTOCOL=http
    depends_on:
      - discovery-service
    networks:
      - app-network


  gateway-service:
    build:
      context: .
      dockerfile: Dockerfile-gateway-service
      platforms:
        - linux/amd64
    image: gateway-service:latest # Substitua pelo nome/imagem do gateway-service
    container_name: gateway-service
    ports:
      - "8081:8081" # Porta típica de um API Gateway
    environment:
      - GATEWAY_SERVICE_HOST=gateway-service
      - GATEWAY_SERVICE_PORT=8081
      - GATEWAY_SERVER_LOG_LEVEL=info
      - GATEWAY_TYPE_PROTOCOL=http
      - EUREKA_SERVER_HOST=discovery-service
      - EUREKA_SERVER_PORT=8761
      - EUREKA_SERVER_LOG_LEVEL=info
      - EUREKA_TYPE_PROTOCOL=http
    depends_on:
      - config-service
      - discovery-service
    networks:
      - app-network


  product-service:
    build:
      context: .
      dockerfile: Dockerfile-product-service
      platforms:
        - linux/amd64
    image: product-service:latest # Substitua pelo nome/imagem do product-service
    container_name: product-service
    ports:
      - "8082:8082" # Porta para o serviço de produtos
    environment:
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=8082
      - EUREKA_SERVER_HOST=discovery-service # Define host do servidor de descoberta
      - EUREKA_SERVER_PORT=8761 # Define porta do servidor de descoberta
      - CONFIG_SERVER_HOST=config-service # Define host do servidor de configuração
      - CONFIG_SERVER_PORT=8080 # Define porta do servidor de configuração
      - PRODUCT_SERVER_LOG_LEVEL=info
      - EUREKA_TYPE_PROTOCOL=http
      - MONGO_SERVICE_HOST=mongodb
      - MONGO_SERVICE_PORT=27017
      - MONGO_SERVICE_DATABASE=productdb
      - MONGO_USER=admin
      - MONGO_PASSWORD=admin
    depends_on:
      - mongodb
      - config-service
      - discovery-service
      - gateway-service
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    platform: linux/amd64
    restart: always
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db # Dados serão persistidos localmente

  mongo-express:
    image: mongo-express:latest
    platform: linux/amd64
    container_name: mongo-express
    restart: always
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017/
      ME_CONFIG_BASICAUTH: false #default credentials is admin:pass when is true
    ports:
      - "8090:8081"
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    platform: linux/amd64
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--http-port", "7080", "--https-port", "7443" ]
    ports:
      - "7080:7080"
      - "7443:7443"
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  postgres-data: